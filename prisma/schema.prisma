generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phone         String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  clients       Client[]
  invoices      Invoice[]
  settings      UserSettings?
  transactions  Transaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                 String  @default("light")
  currency              String  @default("EUR")
  dateFormat            String  @default("DD/MM/YYYY")
  timeZone              String  @default("Europe/Paris")
  emailNotifications    Boolean @default(true)
  invoiceReminders      Boolean @default(true)
  paymentNotifications  Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Client {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  email     String?
  phone     String?
  address   String?
  company   String?
  taxId     String?
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Invoice {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId    String
  client      Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  number      String        @unique
  amount      Float
  tax         Float         @default(0)
  total       Float
  status      InvoiceStatus @default(DRAFT)
  issuedAt    DateTime?
  dueDate     DateTime?
  paidAt      DateTime?
  description String?
  notes       String?
  items       InvoiceItem[]
  transactions Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId])
  @@index([clientId])
  @@index([status])
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoiceId   String
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description String
  quantity    Int     @default(1)
  unitPrice   Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([invoiceId])
}

model Transaction {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoiceId   String?
  invoice     Invoice?          @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  type        TransactionType
  description String
  amount      Float
  status      TransactionStatus @default(PENDING)
  reference   String?
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([userId])
  @@index([invoiceId])
  @@index([type])
  @@index([status])
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  INVOICE_CREATED
  INVOICE_SENT
  INVOICE_PAID
  PAYMENT_RECEIVED
  CLIENT_ADDED
  CLIENT_UPDATED
  REFUND_ISSUED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
